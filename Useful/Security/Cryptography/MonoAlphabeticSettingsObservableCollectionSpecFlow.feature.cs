// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Useful.Security.Cryptography
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MonoAlphabeticSettingsObservableCollectionSpecFlowFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MonoAlphabeticSettingsObservableCollectionSpecFlow.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MonoAlphabeticSettingsObservableCollectionSpecFlow", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "MonoAlphabeticSettingsObservableCollectionSpecFlow")))
            {
                Useful.Security.Cryptography.MonoAlphabeticSettingsObservableCollectionSpecFlowFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test the default settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void TestTheDefaultSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the default settings", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Then("The key will equal \"ABCDEFGHIJKLMNOPQRSTUVWXYZ||True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("The IV will equal \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("The allowed letters will equal \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("The cipher name will equal \"MonoAlphabetic\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("The SettingKey will equal \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can make a simple substitution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICanMakeASimpleSubstitution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can make a simple substitution", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.When("I make the substitution \"A\" to \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("The letter \"A\" will encrypt to \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("The letter \"B\" will encrypt to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("The letter \"B\" will decrypt to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("The letter \"A\" will decrypt to \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("The substitution count will be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("The SettingKey will equal \"AB\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I cannot make a substitution using an unallowed letter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICannotMakeASubstitutionUsingAnUnallowedLetter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I cannot make a substitution using an unallowed letter", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I make the substitution \"a\" to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("The letter \"A\" will encrypt to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I cannot make a substitution to an unallowed letter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICannotMakeASubstitutionToAnUnallowedLetter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I cannot make a substitution to an unallowed letter", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("I make the substitution \"A\" to \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("The letter \"A\" will encrypt to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Unallowed letters will pass through")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void UnallowedLettersWillPassThrough()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unallowed letters will pass through", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.Then("The letter \"a\" will encrypt to \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I get notified when properties change")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void IGetNotifiedWhenPropertiesChange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I get notified when properties change", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("I make the substitution \"A\" to \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("The properties changed are \"Item;Key;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can reset the class")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICanResetTheClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can reset the class", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("I have the default settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.And("I have the substitution \"A\" to \"B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I Reset the settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("The properties changed are \"Item;Key;\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("The letter \"A\" will encrypt to \"A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can create a new instance specifying the settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICanCreateANewInstanceSpecifyingTheSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can create a new instance specifying the settings", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.When("I create a new instance with the key \"ABCD|AB CD|True\" and IV \"\" values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("The key will be \"ABCD|AB CD|True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("The IV will be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can create a new instance with random settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void ICanCreateANewInstanceWithRandomSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can create a new instance with random settings", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.When("I create a new random instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("The key will be \"ABCD|AB CD|True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("The IV will be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test invalid keys")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void TestInvalidKeys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test invalid keys", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "IV",
                        "Notes"});
            table1.AddRow(new string[] {
                        "ABCD|AB BC CA|True",
                        "",
                        "Invalid asymmetric key"});
            table1.AddRow(new string[] {
                        "ABCD|AB",
                        "",
                        "Incorrect number of key parts"});
            table1.AddRow(new string[] {
                        "ABCD ||False",
                        "",
                        "Whitespace"});
            table1.AddRow(new string[] {
                        "ABCD| AB CD |False",
                        "",
                        "Whitespace"});
            table1.AddRow(new string[] {
                        "ABCD|DE|False",
                        "",
                        "Disallowed letters"});
            table1.AddRow(new string[] {
                        "ABCD|aB CD|False",
                        "",
                        "Case sensitive"});
            table1.AddRow(new string[] {
                        "ABCD|AA|True",
                        "",
                        "Substitution to self"});
            table1.AddRow(new string[] {
                        "ABCD|AB BA|True",
                        "",
                        "Duplicate substitution"});
            table1.AddRow(new string[] {
                        "ABCC||True",
                        "",
                        "Duplicate allowed letter"});
            table1.AddRow(new string[] {
                        "ABCD||",
                        "",
                        "Missing symmetry"});
            table1.AddRow(new string[] {
                        "ABCD||null",
                        "",
                        "null symmetry"});
            table1.AddRow(new string[] {
                        "ABCD|| True",
                        "",
                        "Whitespace"});
            table1.AddRow(new string[] {
                        "\"ABCD||True \"",
                        "",
                        "Whitespace"});
#line 62
 testRunner.Given("I am testing invalid keys:", ((string)(null)), table1, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test the Monoalphabetic Settings Observable Collection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSettingsObservableCollectionSpecFlow")]
        public virtual void TestTheMonoalphabeticSettingsObservableCollection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the Monoalphabetic Settings Observable Collection", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "IV",
                        "Substitutions",
                        "NewKey",
                        "Changed",
                        "Notes"});
            table2.AddRow(new string[] {
                        "ABC||True",
                        "",
                        "AB",
                        "ABC|AB|True",
                        "AB,AA;BA,BB",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AB|True",
                        "",
                        "CA",
                        "ABC|AC|True",
                        "CA,CC;AC,AB;BB,BA",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AC|True",
                        "",
                        "AB",
                        "ABC|AB|True",
                        "AB,AC;BA,BB;CC,CA",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AB|True",
                        "",
                        "AA",
                        "ABC||True",
                        "AA,AB;BB,BA",
                        ""});
            table2.AddRow(new string[] {
                        "ABC||False",
                        "",
                        "AB",
                        "ABC|AB|False",
                        "AB,AA;BA,BB",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AB|False",
                        "",
                        "BC",
                        "ABC|AB BC CA|False",
                        "BC,BA;CA,CC",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AB BC|False",
                        "",
                        "CA",
                        "ABC|AB BC CA|False",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AB BC CA|False",
                        "",
                        "BB",
                        "ABC|AC|False",
                        "BB,BC;AC,AB",
                        ""});
            table2.AddRow(new string[] {
                        "ABC|AC|False",
                        "",
                        "AA",
                        "ABC||False",
                        "AA,AC;CC,CA",
                        ""});
            table2.AddRow(new string[] {
                        "ØABC|ØB|True",
                        "",
                        "",
                        "ØABC|ØB|True",
                        "",
                        "Unicode"});
            table2.AddRow(new string[] {
                        "ABCD||tRuE",
                        "",
                        "",
                        "ABCD||True",
                        "",
                        "Case sensitive symmetry"});
#line 79
 testRunner.Given("I am testing MonoAlphabeticSettingsObservableCollection:", ((string)(null)), table2, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
