// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Useful.Security.Cryptography
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MonoAlphabeticSpecFlowFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MonoAlphabeticSpecFlow.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MonoAlphabeticSpecFlow", "\tIn order to use the Monoalphabetic Substitution cipher\r\n\tAs a cryptographer\r\n\tI " +
                    "want to test encryption and decryption", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "MonoAlphabeticSpecFlow")))
            {
                Useful.Security.Cryptography.MonoAlphabeticSpecFlowFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test the Monoalphabetic Substitution cipher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MonoAlphabeticSpecFlow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void TestTheMonoalphabeticSubstitutionCipher()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the Monoalphabetic Substitution cipher", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransformMode",
                        "Key",
                        "IV",
                        "Plaintext",
                        "Ciphertext",
                        "NewIV",
                        "Notes"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABC|AB|True",
                        "",
                        "ABC",
                        "BAC",
                        "",
                        "Basic Symmetric Encryption"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABCD|AB CD|True",
                        "",
                        "ABCD",
                        "BADC",
                        "",
                        "Multiple Substitution pairs"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABC|AB BC CA|False",
                        "",
                        "ABC",
                        "BCA",
                        "",
                        "Basic Asymmetric Encryption"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABC||True",
                        "",
                        "ABC",
                        "ABC",
                        "",
                        "No Substitutions"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABCD||True",
                        "",
                        "ABÅCD",
                        "ABÅCD",
                        "",
                        "Disallowed chars"});
            table1.AddRow(new string[] {
                        "Decrypt",
                        "ABCD|AB CD|True",
                        "",
                        "ABCD",
                        "BADC",
                        "",
                        "Basic Symmetric Decryption"});
            table1.AddRow(new string[] {
                        "Decrypt",
                        "ABC|AB BC CA|False",
                        "",
                        "ABC",
                        "BCA",
                        "",
                        "Basic Asymmetric Decryption"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABCD|AB CD|True",
                        "",
                        "AB CD",
                        "BA DC",
                        "",
                        "Whitespace"});
            table1.AddRow(new string[] {
                        "Encrypt",
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZ|AB CD EF GH|True",
                        "",
                        "HeLlOwOrLd",
                        "GeLlOwOrLd",
                        "",
                        "Mixed case"});
            table1.AddRow(new string[] {
                        "Decrypt",
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZ|AB CD EF GH|True",
                        "",
                        "HeLlOwOrLd",
                        "GeLlOwOrLd",
                        "",
                        "Mixed case"});
#line 8
 testRunner.Given("I am testing Monoalphabetic:", ((string)(null)), table1, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
